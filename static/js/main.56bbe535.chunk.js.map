{"version":3,"sources":["components/PlayBtns.js","pages/WelcomePage.js","components/Card.js","utils/API.js","utils/elcFunctions.js","components/EndGame.js","pages/GamePage.js","pages/EmptyPage.js","components/Navbar.js","components/Footer.js","App.js","index.js"],"names":["PlayBtns","react_default","a","createElement","className","this","props","morePlay","react_router_dom","to","onClick","resetGame","href","role","React","Component","WelcomePage","src","alt","target","rel","PlayBtns_PlayBtns","Card","state","selected","selectCard","API","pageTotal","axios","get","getCards","pageNum","concat","hasClass","el","classList","contains","match","RegExp","addClass","add","removeClass","remove","reg","replace","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","EndGameModal","isOpen","gameOn","open","tries","Object","assign","GamePage","cardPages","pagesChecked","cardArr","difficulty","remainingCards","choice1","choice2","noTouchy","wins","losses","getPages","then","res","_this","setState","data","total_cards","getCardsDefault","catch","err","console","log","i","cards","randomCard","undefined","includes","image_uris","normal","card_faces","push","finalArr","selectCards","e","selectedCard","parentNode","cardParent","firstElementChild","document","querySelectorAll","forEach","card","lastElementChild","endGame","setTimeout","toggleGame","_this2","cardId","map","Card_Card","key","EndGame_EndGameModal","EmptyPage","Navbar","Footer","App","components_Navbar","react_router","exact","path","render","WelcomePage_WelcomePage","GamePage_GamePage","component","ReactDOM","App_App","getElementById"],"mappings":"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","file":"static/js/main.56bbe535.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/PlayBtns.css';\r\n\r\nexport default class PlayBtns extends React.Component {\r\n\r\n\r\nrender() {\r\n    return (\r\n        <div className='btnWrapper'>\r\n            {!this.props.morePlay ?\r\n                <a href={'/magicalmemory'}>\r\n                    <span className=\"play-btn\" role='button'>\r\n                        Play!\r\n                    </span>\r\n                </a> :\r\n                <div className='btnDiv'>\r\n                    <Link to={'/magicalmemory'}>\r\n                        <button className=\"reset-btn\" onClick={this.props.resetGame}>\r\n                            Play Again!\r\n                        </button>\r\n                    </Link>\r\n                    <Link to={'/welcome'}>\r\n                        <button className=\"returnhome-btn\" onClick={this.props.resetGame}>\r\n                            Main Menu\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n            } \r\n        </div>\r\n        \r\n    )\r\n}\r\n};","import React, { Component } from \"react\";\r\nimport '../styles/Welcome.css';\r\nimport PlayBtns from '../components/PlayBtns';\r\n\r\nexport default class WelcomePage extends Component {\r\n\r\ncomponentDidMount() {\r\n\r\n}\r\n\r\nrender() {\r\n    return (\r\n        <header className='introHeader'>\r\n            <img src='/images/memorysjourney.jpg' className='memoryPic' alt=\"Memory's Journey Card\"></img>\r\n            <h2 className='introLead'><i>Do you have a Magical Memory?</i></h2>\r\n            <p className='introText'>\r\n                Welcome to Magical Memory, a fan-made memory matching game based on Magic the Gathering, powered by the API at <a href='https://scryfall.com/' target='_blank' rel='noopener noreferrer' className='scryfallLink'>Scryfall.com</a><br></br>\r\n                You will be presented with a selection of face-down magic the gathering cards. Whenever you click a card, it will turn face up and you get the chance to click another card. When you click on another face-down card, if it matches your previous card, they both stay face-up, but if they do not match they will both flip back over. You continue to play until you have either successfully turned all of the cards face-up or until you have failed to find a match for three tries. <br></br>\r\n                When you click the \"Play\" button below, the game will start. Good Luck!\r\n            </p>\r\n            <PlayBtns />\r\n        </header>\r\n        \r\n    )\r\n}\r\n\r\n};","import React, { Component } from \"react\";\r\nimport '../styles/Card.css'\r\n\r\nexport default class Card extends Component {\r\n    state = {\r\n        selected: false,\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='mtgCards'>\r\n                <div className='innerMtgCards unSelectedCard' onClick={this.props.selectCard}>\r\n                    <img className='allcards cardFront' src={this.props.src} alt='Magic the Gathering game card.' ></img>\r\n                    <img className='allcards cardBack' src='/images/mtgBack.jpg' alt='Magic the Gathering game card.' onClick={this.props.selectCard}></img>\r\n                </div>\r\n            </div>\r\n            \r\n        ) \r\n    }\r\n};","import axios from \"axios\";\r\n\r\nexport default {\r\n\r\n    //Find pages total\r\n    pageTotal: function() {\r\n        return axios.get(`https://api.scryfall.com/cards/search?unique=cards&order=set&page=1&q=*`)\r\n    },\r\n\r\n    // Gets all cards\r\n    getCards: function(pageNum) {\r\n        return axios.get(`https://api.scryfall.com/cards/search?unique=cards&order=set&page=${pageNum}&q=*`)\r\n    }\r\n\r\n}\r\n\r\n\r\n","\n// This file holds utility functions we can use if we do vanilla js to do similar things to jQuery. If we use jQuery we can delete this file.\n\n//This function will grab an element by its class, but only the last one in the array of elements by class. Most useful when replacing html IDs with Classes.\nexport const elemByClass = (selectedClass) => {\n    let result;\n    selectedClass.forEach(element => {\n        result = element\n    });\n    return result;\n};\n// ----------------\n\nexport const funcOnClass = (querySeleced, func) => {\n    querySeleced.forEach(element => {\n        func(element)\n    });\n}\n// ----------------\n\nexport const clickClass = (querySeleced, func) => {\n    if (typeof querySeleced === 'object' && querySeleced !== null){\n        if(querySeleced.length >= 1){\n            querySeleced.forEach(element => {\n                element.addEventListener('click', func)\n            });\n        } else if (objectLength(querySeleced) === 0) {\n            querySeleced.addEventListener('click', func)\n        } else if (querySeleced === null) {\n            say (\"The element is null.\");\n        } else if (querySeleced === undefined) {\n            say (\"The element is undefined.\");\n        } else {\n            say (\"Something is wrong here!\")\n        };\n    };\n};\n// ----------------\n\nexport const hasClass = (el, className) => {\n    if (el.classList)\n        return el.classList.contains(className)\n    else\n        return !!el.className.match(new RegExp(`(\\\\s|^)${className}(\\\\s|$)`))\n}\n// ----------------\n\nexport const addClass = (el, className) => {\n    if (el.classList)\n        el.classList.add(className)\n    else if (!hasClass(el, className)) el.className += ' ' + className\n}\n// ----------------\n\nexport const removeClass = (el, className) => {\n    if (el.classList)\n        el.classList.remove(className)\n    else if (hasClass(el, className)) {\n        const reg = new RegExp(`(\\\\s|^)${className}(\\\\s|$)`)\n        el.className = el.className.replace(reg, ' ')\n    }\n}\n// ----------------\n\nexport const q = (check) => {\n    console.log(`Q: This ${typeof check} has a value of:`);\n    console.log(check)\n}\n// ----------------\n\nexport const say = (log) => {\n    console.log(`Message: ${log}`);\n}\n// ----------------\n\nexport const objectLength = (object) => {\n    return Object.keys(object).length;\n}\n// ----------------\n\n// This function is a tweaked version of a shuffler written by CoolAJ86 at Stack Overflow - Source: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport const shuffle = (array) => {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n// ----------------","import React, { Component } from \"react\";\r\nimport '../styles/EndGame.css'\r\nimport PlayBtns from \"./PlayBtns\";\r\n\r\nexport default class EndGameModal extends Component {\r\n    state = {\r\n        isOpen: false\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div className='endGameModal'>\r\n                {!this.props.gameOn ? \r\n                    <dialog open>\r\n                            {this.props.tries > 0 && !this.props.gameOn ? \r\n                                <div className='winnerDiv'>\r\n                                    <p>You Won!</p>\r\n                                    <PlayBtns {...this.props}\r\n                                        gameOn={this.props.gameOn}\r\n                                        morePlay={!this.state.morePlay}\r\n                                        resetGame={this.props.resetGame}\r\n                                    />\r\n                                </div> :\r\n                                <div className='loserDiv'>\r\n                                    <p>You Lost!</p>\r\n                                    <PlayBtns {...this.props}\r\n                                        gameOn={this.props.gameOn}\r\n                                        morePlay={this.props.morePlay}\r\n                                        resetGame={this.props.resetGame}\r\n                                    />\r\n                                </div>\r\n                            }\r\n                    </dialog> \r\n                : <dialog></dialog>}\r\n            </div>\r\n    \r\n        )}\r\n};","import React, { Component } from \"react\";\r\nimport Card from '../components/Card';\r\nimport API from '../utils/API';\r\nimport { hasClass, addClass, shuffle, removeClass } from '../utils/elcFunctions'\r\nimport EndGameModal from \"../components/EndGame\";\r\nimport '../styles/GameBoard.css'\r\n\r\nexport default class GamePage extends Component {\r\nstate = {\r\n    cardPages: 1,\r\n    pagesChecked: false,\r\n    cardArr: [],\r\n    difficulty: 'easy',\r\n    tries: 5,\r\n    remainingCards: 100,\r\n    choice1: '',\r\n    choice2: '',\r\n    noTouchy: false,\r\n    morePlay: false,\r\n    wins: 0,\r\n    losses: 0,\r\n}\r\n\r\ncomponentDidMount() {\r\n    this.props.toggleGame();\r\n    this.setState({\r\n        noTouchy: false,\r\n    })\r\n    this.getPages();\r\n}\r\n\r\ngetPages = () => {\r\n    API.pageTotal()\r\n    .then( res => \r\n        this.setState({\r\n            cardPages: (Math.floor(Math.random() * (res.data.total_cards + 1)/175)),\r\n            pagesChecked: true,\r\n        })\r\n    )\r\n    .then( res => {\r\n        if(this.state.pagesChecked){\r\n            this.getCardsDefault();\r\n        }\r\n    })\r\n    .catch(err => {\r\n        console.log(\"Um, sir, there is a problem with getting the page total...\")\r\n        console.log(err)\r\n    });\r\n}\r\n\r\ngetCardsDefault = () => {\r\n    API.getCards(this.state.cardPages)\r\n    .then(res => {\r\n        const cards = res.data.data;\r\n        let i;\r\n        switch(this.state.difficulty) {\r\n            case 'easy' : \r\n                i = 6;\r\n                break;\r\n            case 'standard' : \r\n                i = 12;\r\n                break;\r\n            case 'hard' : \r\n                i = 24;\r\n                break;\r\n            default:\r\n                break;\r\n        };\r\n        let cardArr = [];\r\n        while (i > 0) {\r\n            let randomCard = cards[Math.floor(Math.random() * (cards.length + 1))];\r\n            if(randomCard !== undefined) {\r\n                if (!cardArr.includes(randomCard)) {\r\n                    if(!randomCard.image_uris.normal) {\r\n                        randomCard.image_uris.normal = randomCard.card_faces[Math.floor(Math.random() * 2)]\r\n                        console.log(`I changed it to: ${randomCard.image_uris.normal}!`)\r\n                    }\r\n                    cardArr.push(randomCard);\r\n                    i--\r\n                }\r\n            }\r\n\r\n        }\r\n        if (i === 0) {\r\n            const finalArr = cardArr.concat(cardArr);\r\n            this.setState({\r\n                cardArr: shuffle(finalArr),\r\n                remainingCards: finalArr.length\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nselectCards = (e) => {\r\n    // If the cards are allowed to be clicked...\r\n    if(!this.state.noTouchy){\r\n\r\n        //Establish our clicked card and then, if it is a hidden card and the game is on...\r\n        const selectedCard = e.target.parentNode;\r\n        const cardParent = selectedCard.parentNode\r\n        if(hasClass(selectedCard, 'unSelectedCard') && this.props.gameOn) {\r\n\r\n            if(!hasClass(cardParent, 'flipped')) {\r\n                addClass(cardParent, 'flipped');\r\n            }\r\n\r\n            // If the first card of a pair hasn't been chosen yet, the clicked card is identified as the first choice.\r\n            if(this.state.choice1 === ''){\r\n                this.setState({\r\n                    choice1: selectedCard.firstElementChild.src\r\n                })\r\n                addClass(selectedCard, 'selectedCard');\r\n                removeClass(selectedCard, 'unSelectedCard');\r\n\r\n            // If the first card has been chosen, this card becomes the second choice card.\r\n            } else if (this.state.choice1 !== '' && this.state.choice2 === '') {\r\n                this.setState({\r\n                    choice2: selectedCard.firstElementChild.src\r\n                })\r\n                addClass(selectedCard, 'selectedCard');\r\n                removeClass(selectedCard, 'unSelectedCard');\r\n\r\n                // We then check to see if the pair of cards matches or not. If they do, mark both as finished cards.\r\n                if(this.state.choice1 === selectedCard.firstElementChild.src) {\r\n                    const revealedCards = document.querySelectorAll('div.selectedCard')\r\n                    revealedCards.forEach(card => {\r\n                        console.log(card.firstElementChild.src)\r\n                        if(card.firstElementChild.src === selectedCard.firstElementChild.src){\r\n                            card.lastElementChild.src = selectedCard.firstElementChild.src\r\n                        }\r\n                        console.log(card.lastElementChild)\r\n                        if(!hasClass(card, 'finishedCard')){\r\n                            addClass(card, 'finishedCard');\r\n                        }\r\n                    });\r\n                    //Reset the card choices, reduce the number of remaining cards, and if those were the last cards, commence the endgame.\r\n                    this.setState({\r\n                        choice1: '',\r\n                        choice2: '',\r\n                        remainingCards: this.state.remainingCards-2\r\n                    }, () => {\r\n                        if(this.state.remainingCards === 0) {\r\n                            this.setState({\r\n                                wins: this.state.wins+1\r\n                            }, () => {\r\n                                this.endGame();\r\n                            })\r\n\r\n                        }\r\n                    })\r\n\r\n                // If the cards don't match, reduce the remaining tries the player has, and prevent the player from clicking another card until this check resolves. \r\n                } else {\r\n                    this.setState({\r\n                        tries: this.state.tries-1,\r\n                        noTouchy: true\r\n                    }, () => {\r\n                        // If the remaining total of tries is zero, commence the endgame.\r\n                        if(this.state.tries === 0) {\r\n                            this.setState({ \r\n                                morePlay: true,\r\n                                losses: this.state.losses+1\r\n                            }, () => {\r\n                                console.log('I\\'m comencing the endgame!')\r\n                                this.endGame();\r\n                            })\r\n                        }\r\n                    })\r\n                    // After a short delay so the player can see both mismatched cards they chose, flip the cards back over, deselect them, and allow the player to click cards again.\r\n                    setTimeout( () => {\r\n                        const revealedCards = document.querySelectorAll('div.selectedCard')\r\n                        revealedCards.forEach(card => {\r\n                            if(!hasClass(card, 'finishedCard')) {\r\n                                removeClass(card, 'selectedCard');\r\n                                addClass(card, 'unSelectedCard');\r\n                            }\r\n                            if(hasClass(card.parentNode, 'flipped') && !hasClass(card, 'finishedCard')) {\r\n                                removeClass(card.parentNode, 'flipped');\r\n                            }\r\n                        });\r\n                        this.setState({\r\n                            choice1: '',\r\n                            choice2: '',\r\n                            noTouchy: false\r\n                        })\r\n                    }, 1500);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nendGame = () => {\r\n    this.props.toggleGame();\r\n}\r\n\r\nresetGame = (e) => {\r\n    console.log('I\\'m resetting!')\r\n    this.setState({\r\n        cardPages: 1,\r\n        pagesChecked: false,\r\n        cardArr: [],\r\n        difficulty: 'easy',\r\n        tries: 3,\r\n        remainingCards: 100,\r\n        choice1: '',\r\n        choice2: '',\r\n        noTouchy: false\r\n    }, () => {\r\n        this.props.toggleGame();\r\n        this.getPages();\r\n    }) \r\n}\r\n\r\nrender() {\r\n    let cardId = 0;\r\n    return (\r\n        <section className='gameBoard'>\r\n            <h1 className='winsNlosses wins'>Wins: {this.state.wins}</h1><h1 className='remainingText'>Remaining Tries: {this.state.tries}</h1><h1 className='winsNlosses losses'>Losses: {this.state.losses}</h1>\r\n            <div className='cardsDiv'>\r\n                {this.state.cardArr.map(card => (\r\n                    <Card {...this.props} \r\n                        key={cardId++}\r\n                        src={card.image_uris.normal}\r\n                        selectCard={this.selectCards}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <EndGameModal {...this.props}\r\n                gameOn={this.props.gameOn}\r\n                tries={this.state.tries}\r\n                morePlay={this.state.morePlay}\r\n                resetGame={this.resetGame}\r\n            />\r\n        </section>\r\n\r\n\r\n    )\r\n}\r\n\r\n};","import React from \"react\";\r\n\r\nfunction EmptyPage() {\r\n    return (\r\n        <h1>This Page is Empty</h1>\r\n    );\r\n}\r\n\r\nexport default EmptyPage;","import React from \"react\";\r\nimport '../styles/Navbar.css'\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className='navBar'>\r\n            <h1 className='homeCorner'><a href='https://edwardcheever.herokuapp.com' target='_blank'>Home</a></h1>\r\n            <h1 className='titleText'>Magical Memory</h1>\r\n            <h3 className='tagLine'>A Magic the Gathering Matching Memory Game</h3>\r\n            <h1 className='mainMenuExit'><a href='/welcome'>Main Menu</a></h1>\r\n        </nav>\r\n    \r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <h1>Footer</h1>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport WelcomePage from './pages/WelcomePage';\nimport GamePage from './pages/GamePage';\nimport EmptyPage from './pages/EmptyPage';\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\n\nexport default class App extends Component {\nstate = {\n  gameOn: false,\n}\n\ntoggleGame = () => {\n  this.setState({ gameOn: !this.state.gameOn})\n}\n\nrender() {\n    return (\n    <Router>\n      <main className='newBody'>\n        <Navbar />\n        <Switch>\n          <Route \n            exact path=\"/\" render={(props) => \n              <WelcomePage {...props} \n                gameOn={this.state.gameOn} \n                toggleGame={this.toggleGame}\n              />} \n          />\n          <Route \n            exact path=\"/welcome\" render={(props) => \n              <WelcomePage {...props} \n                gameOn={this.state.gameOn} \n                toggleGame={this.toggleGame}\n              />} \n          />\n          <Route \n            exact path=\"/magicalmemory\" render={(props) => \n              <GamePage {...props} \n                gameOn={this.state.gameOn} \n                toggleGame={this.toggleGame}\n              />} \n          />\n          <Route \n            component={EmptyPage} \n          />\n        </Switch>\n        {/* <Footer /> */}\n      </main>\n    </Router>\n  );\n}\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/App.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}